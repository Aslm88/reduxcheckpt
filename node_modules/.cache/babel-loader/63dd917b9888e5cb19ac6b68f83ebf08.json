{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Ahmed\\\\Desktop\\\\Redux checkpt\\\\reduxtodoapp\\\\src\\\\components\\\\Todos.js\",\n    _s = $RefreshSig$();\n\nimport React, { useRef, useState } from 'react';\nimport { connect } from \"react-redux\";\nimport { addTodos, removeTodos } from '../redux/reducer';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst mapStateToProps = state => {\n  return {\n    todos: state\n  };\n};\n\nconst mapDispatchToProps = dispatch => {\n  return {\n    addTodo: obj => dispatch(addTodos(obj)),\n    removeTodo: id => dispatch(removeTodos(id))\n  };\n};\n\nconst Todos = props => {\n  _s();\n\n  const [todo, setTodo] = useState(\"\");\n  const inputRef = useRef(true);\n\n  const changeFocus = () => {\n    inputRef.current.disabled = false;\n    inputRef.current.focus();\n  };\n\n  const handleChange = e => {\n    setTodo(e.target.value);\n  };\n\n  useState(\"todo text\");\n  console.log(\"props from \", props);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"addTodos\",\n    children: [/*#__PURE__*/_jsxDEV(\"input\", {\n      type: \"text\",\n      onChange: e => handleChange(e),\n      className: \"todo-input\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 38,\n      columnNumber: 11\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      className: \"add-btn\",\n      onClick: () => props.addTodo({\n        id: Math.floor(Math.random() * 1000),\n        item: todo,\n        completed: false\n      }),\n      children: \"Add\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 44,\n      columnNumber: 11\n    }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 56,\n      columnNumber: 11\n    }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n      children: props.todos.map(item => {\n        return /*#__PURE__*/_jsxDEV(\"li\", {\n          children: [/*#__PURE__*/_jsxDEV(\"textarea\", {\n            ref: inputRef,\n            disabled: inputRef,\n            defaultValue: item.item\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 62,\n            columnNumber: 30\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            onClick: () => changeFocus(),\n            children: \"Edit\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 70,\n            columnNumber: 29\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            onClick: () => props.removeTodo(item.id),\n            children: \"Delete\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 71,\n            columnNumber: 29\n          }, this), \" \"]\n        }, item.id, true, {\n          fileName: _jsxFileName,\n          lineNumber: 61,\n          columnNumber: 30\n        }, this);\n      })\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 57,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 37,\n    columnNumber: 9\n  }, this);\n};\n\n_s(Todos, \"J9xrKQxMEFbhYRO2mW5hfnc5uXM=\");\n\n_c = Todos;\nexport default connect(mapStateToProps, mapDispatchToProps)(Todos);\n\nvar _c;\n\n$RefreshReg$(_c, \"Todos\");","map":{"version":3,"sources":["C:/Users/Ahmed/Desktop/Redux checkpt/reduxtodoapp/src/components/Todos.js"],"names":["React","useRef","useState","connect","addTodos","removeTodos","mapStateToProps","state","todos","mapDispatchToProps","dispatch","addTodo","obj","removeTodo","id","Todos","props","todo","setTodo","inputRef","changeFocus","current","disabled","focus","handleChange","e","target","value","console","log","Math","floor","random","item","completed","map"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,MAAhB,EAAwBC,QAAxB,QAAwC,OAAxC;AACA,SAAQC,OAAR,QAAsB,aAAtB;AACA,SAASC,QAAT,EAAmBC,WAAnB,QAAsC,kBAAtC;;;AAGA,MAAMC,eAAe,GAAIC,KAAD,IAAW;AAC/B,SAAO;AACHC,IAAAA,KAAK,EAAED;AADJ,GAAP;AAGH,CAJD;;AAMA,MAAME,kBAAkB,GAAIC,QAAD,IAAa;AACpC,SAAO;AACHC,IAAAA,OAAO,EAAGC,GAAD,IAASF,QAAQ,CAAEN,QAAQ,CAACQ,GAAD,CAAV,CADvB;AAEHC,IAAAA,UAAU,EAAGC,EAAD,IAAQJ,QAAQ,CAAEL,WAAW,CAACS,EAAD,CAAb;AAFzB,GAAP;AAIH,CALD;;AAOA,MAAMC,KAAK,GAAIC,KAAD,IAAW;AAAA;;AAEpB,QAAM,CAACC,IAAD,EAAOC,OAAP,IAAkBhB,QAAQ,CAAC,EAAD,CAAhC;AAEA,QAAMiB,QAAQ,GAAGlB,MAAM,CAAC,IAAD,CAAvB;;AAEA,QAAMmB,WAAW,GAAG,MAAM;AACtBD,IAAAA,QAAQ,CAACE,OAAT,CAAiBC,QAAjB,GAA2B,KAA3B;AACAH,IAAAA,QAAQ,CAACE,OAAT,CAAiBE,KAAjB;AACH,GAHD;;AAKA,QAAMC,YAAY,GAAIC,CAAD,IAAM;AACvBP,IAAAA,OAAO,CAAEO,CAAC,CAACC,MAAF,CAASC,KAAX,CAAP;AACH,GAFD;;AAGAzB,EAAAA,QAAQ,CAAC,WAAD,CAAR;AACA0B,EAAAA,OAAO,CAACC,GAAR,CAAY,aAAZ,EAA2Bb,KAA3B;AAED,sBACI;AAAK,IAAA,SAAS,EAAC,UAAf;AAAA,4BACE;AACG,MAAA,IAAI,EAAC,MADR;AAEG,MAAA,QAAQ,EAAGS,CAAD,IAAKD,YAAY,CAACC,CAAD,CAF9B;AAGG,MAAA,SAAS,EAAC;AAHb;AAAA;AAAA;AAAA;AAAA,YADF,eAOE;AACG,MAAA,SAAS,EAAC,SADb;AAEG,MAAA,OAAO,EAAE,MACPT,KAAK,CAACL,OAAN,CAAc;AACVG,QAAAA,EAAE,EAAEgB,IAAI,CAACC,KAAL,CAAWD,IAAI,CAACE,MAAL,KAAgB,IAA3B,CADM;AAEVC,QAAAA,IAAI,EAAEhB,IAFI;AAGViB,QAAAA,SAAS,EAAE;AAHD,OAAd,CAHL;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YAPF,eAmBE;AAAA;AAAA;AAAA;AAAA,YAnBF,eAoBI;AAAA,gBAESlB,KAAK,CAACR,KAAN,CAAY2B,GAAZ,CAAkBF,IAAD,IAAU;AACxB,4BACK;AAAA,kCACA;AACA,YAAA,GAAG,EAAEd,QADL;AAEA,YAAA,QAAQ,EAAEA,QAFV;AAGA,YAAA,YAAY,EAAEc,IAAI,CAACA;AAHnB;AAAA;AAAA;AAAA;AAAA,kBADA,eASD;AAAQ,YAAA,OAAO,EAAE,MAAIb,WAAW,EAAhC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBATC,eAUD;AAAQ,YAAA,OAAO,EAAE,MAAIJ,KAAK,CAACH,UAAN,CAAiBoB,IAAI,CAACnB,EAAtB,CAArB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBAVC,EAU+D,GAV/D;AAAA,WAASmB,IAAI,CAACnB,EAAd;AAAA;AAAA;AAAA;AAAA,gBADL;AAcH,OAfA;AAFT;AAAA;AAAA;AAAA;AAAA,YApBJ;AAAA;AAAA;AAAA;AAAA;AAAA,UADJ;AA0CH,CA3DD;;GAAMC,K;;KAAAA,K;AA6DN,eAAeZ,OAAO,CAACG,eAAD,EAAiBG,kBAAjB,CAAP,CAA4CM,KAA5C,CAAf","sourcesContent":["import React, { useRef, useState } from 'react';\r\nimport {connect} from \"react-redux\";\r\nimport { addTodos, removeTodos } from '../redux/reducer';\r\n\r\n\r\nconst mapStateToProps = (state) => {\r\n    return {\r\n        todos: state ,\r\n    };\r\n};\r\n\r\nconst mapDispatchToProps = (dispatch) =>{\r\n    return {\r\n        addTodo: (obj) => dispatch (addTodos(obj)),\r\n        removeTodo: (id) => dispatch (removeTodos(id)),\r\n    }\r\n}\r\n\r\nconst Todos = (props) => {\r\n\r\n     const [todo, setTodo] = useState(\"\");\r\n\r\n     const inputRef = useRef(true);\r\n\r\n     const changeFocus = () => {\r\n         inputRef.current.disabled =false;\r\n         inputRef.current.focus();\r\n     }\r\n\r\n     const handleChange = (e) =>{\r\n         setTodo (e.target.value);\r\n     };\r\n     useState(\"todo text\");\r\n     console.log(\"props from \", props);\r\n\r\n    return (\r\n        <div className=\"addTodos\">\r\n          <input \r\n             type=\"text\"\r\n             onChange={(e)=>handleChange(e)} \r\n             className=\"todo-input\"\r\n             />\r\n\r\n          <button \r\n             className=\"add-btn\" \r\n             onClick={()=>\r\n               props.addTodo({\r\n                   id: Math.floor(Math.random() * 1000),\r\n                   item: todo,\r\n                   completed: false,\r\n               }) \r\n              }\r\n              >\r\n                  Add\r\n          </button>\r\n          <br/>\r\n            <ul>\r\n                \r\n                   { props.todos.map ((item) => {\r\n                        return (\r\n                             <li key={item.id}>\r\n                             <textarea \r\n                             ref={inputRef} \r\n                             disabled={inputRef}\r\n                             defaultValue={item.item}\r\n                             />\r\n                                   \r\n                                \r\n\r\n                            <button onClick={()=>changeFocus()}>Edit</button> \r\n                            <button onClick={()=>props.removeTodo(item.id)}>Delete</button>{\" \"}\r\n                            </li>\r\n                        );\r\n                    })}\r\n            </ul>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default connect(mapStateToProps,mapDispatchToProps)(Todos) ;\r\n"]},"metadata":{},"sourceType":"module"}
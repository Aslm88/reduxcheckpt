{"version":3,"sources":["redux/reducer.js","components/todoItem.js","components/DisplayTodos.js","components/Todos.js","App.js","redux/store.js","reportWebVitals.js","index.js"],"names":["addTodoReducer","createSlice","name","initialState","reducers","addTodos","state","action","push","payload","removeTodos","filter","item","id","updateTodos","map","todo","completeTodos","completed","actions","reducer","TodoItem","props","updateTodo","removeTodo","completeTodo","inputRef","UseRef","className","ref","disabled","defaultValue","onKeyPress","e","value","which","current","update","onClick","Current","focus","connect","todos","dispatch","addTodo","obj","useState","sort","setSort","length","setTodo","console","log","type","onChange","target","handleChange","Math","floor","random","App","store","configureStore","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.3bec55d1.chunk.js","sourcesContent":["import {createSlice} from \"@reduxjs/toolkit\";\r\n\r\nconst initialState = [];\r\n\r\nconst addTodoReducer = createSlice( {\r\n    name: \"todos\",\r\n    initialState,\r\n    reducers:{\r\n        //adding tasks\r\n        addTodos:(state,action) => {\r\n            state.push(action.payload);\r\n            return state;\r\n        },\r\n         //remove tasks\r\n         removeTodos: (state, action) => {\r\n             return state.filter((item)=> item.id !== action.payload);\r\n         },\r\n         //update tasks\r\n         updateTodos: (state,action) => {\r\n             return state.map(todo => {\r\n                 if(todo.id ===action.payload.id){\r\n                     return {\r\n                         ...todo,\r\n                         item: action.payload.item,\r\n                     };\r\n                     \r\n                 }\r\n                 return todo ;\r\n             });\r\n          \r\n         },\r\n          \r\n         //completed tasks\r\n          completeTodos: (state,action) => {\r\n\r\n            return state.map(todo => {\r\n                 if(todo.id ===action.payload){\r\n                     return {\r\n                         ...todo,\r\n                         completed: true,\r\n                     };\r\n                     \r\n                 }\r\n                 return todo ;\r\n             }); \r\n         } \r\n\r\n    },\r\n});\r\n\r\nexport const {addTodos,removeTodos,updateTodos,completeTodos} =addTodoReducer.actions;\r\nexport const reducer = addTodoReducer.reducer;","import React, {UseRef}from 'react';\r\n\r\nconst TodoItem = (props) => {\r\n    const {item,updateTodo,removeTodo,completeTodo}= props;\r\n    const inputRef = UseRef;\r\n\r\n     const changeFocus = () => {\r\n         inputRef.current.disabled =false;\r\n         inputRef.Current.focus()\r\n     }\r\n\r\n     const update = (id,value,e)=> {\r\n\r\n        if ((e).which === 13){\r\n            updateTodo({ id, item: value});\r\n            inputRef.current.disabled = true;\r\n        }\r\n     };\r\n    return (\r\n        <li key={item.id} className=\"card\">\r\n                            <textarea \r\n                             ref={inputRef} \r\n                             disabled={inputRef}\r\n                             defaultValue={item.item}\r\n                             onKeyPress={(e) => update(item.id, inputRef.current.value, (e))}\r\n                             />\r\n                            <div >\r\n                            <button onClick={()=>changeFocus()}>\r\n                                Edit</button> \r\n                            <button onClick={()=>completeTodo(item.id)}>\r\n                                Done</button>\r\n                            <button onClick={()=>removeTodo(item.id)}>\r\n                                Delete</button>{\" \"}\r\n                                </div>\r\n                                {item.completed && <span className=\"completed\">Finished</span>}\r\n                            </li>\r\n    )\r\n}\r\n\r\n    export default TodoItem;\r\n","import React, { useState } from 'react';\r\nimport {connect} from 'react-redux';\r\nimport { addTodos, completeTodos, removeTodos, updateTodos } from '../redux/reducer';\r\nimport TodoItem from './todoItem';\r\n\r\nconst mapStateToProps = (state) => {\r\n    return {\r\n        todos: state ,\r\n    };\r\n};\r\n\r\nconst mapDispatchToProps = (dispatch) =>{\r\n    return {\r\n        addTodo: (obj) => dispatch (addTodos(obj)),\r\n        removeTodo: (id) => dispatch (removeTodos(id)),\r\n        updateTodo: (obj) => dispatch (updateTodos(obj)),\r\n        completeTodo: (id) => dispatch (completeTodos(id)),\r\n    };\r\n};\r\n\r\nconst DisplayTodos = (props) => {\r\n    const [sort, setSort] = useState(\"active\")\r\n    return (\r\n        \r\n        <div className=\"displaytodos\">\r\n            <div className=\"buttons\">\r\n                <button onClick={()=>setSort(\"active\")}>Active</button>\r\n                <button onClick={()=>setSort(\"completed\")}>completed</button>\r\n                <button onClick={()=>setSort(\"all\")}>All</button>\r\n            </div>\r\n            \r\n            <ul>\r\n                {\r\n                    props.todos.length > 0 && sort === \"active\" ?\r\n\r\n                    props.todos.map(item => {\r\n                        return (\r\n                            item.completed === false &&\r\n                            <TodoItem\r\n                              key={item.id}\r\n                              item={item}\r\n                              removeTodo={props.removeTodo}\r\n                              updateTodo={props.updateTodo}\r\n                              completeTodo={props.completeTodo}\r\n                            />\r\n                        )\r\n                        }) :null }\r\n\r\n                         {\r\n                    props.todos.length > 0 && sort === \"completed\" ?\r\n\r\n                    props.todos.map(item => {\r\n                        return (\r\n                            item.completed === true &&\r\n                            <TodoItem\r\n                              key={item.id}\r\n                              item={item}\r\n                              removeTodo={props.removeTodo}\r\n                              updateTodo={props.updateTodo}\r\n                              completeTodo={props.completeTodo}\r\n                            />\r\n                        )\r\n                        }) :null }\r\n\r\n                         {\r\n                    props.todos.length > 0 && sort === \"all\" ?\r\n\r\n                    props.todos.map(item => {\r\n                        return (\r\n                           \r\n                            <TodoItem\r\n                              key={item.id}\r\n                              item={item}\r\n                              removeTodo={props.removeTodo}\r\n                              updateTodo={props.updateTodo}\r\n                              completeTodo={props.completeTodo}\r\n                            />\r\n                        )\r\n                        }) :null }\r\n                       \r\n                    \r\n                        \r\n\r\n\r\n            </ul> \r\n\r\n            \r\n        </div>\r\n       \r\n    );\r\n};\r\n\r\nexport default connect (mapStateToProps, mapDispatchToProps) (DisplayTodos);\r\n","import React, { useRef, useState } from 'react';\r\nimport {connect} from \"react-redux\";\r\nimport { addTodos, completeTodos, removeTodos, updateTodos } from '../redux/reducer';\r\n\r\n\r\nconst mapStateToProps = (state) => {\r\n    return {\r\n        todos: state ,\r\n    };\r\n};\r\n\r\nconst mapDispatchToProps = (dispatch) =>{\r\n    return {\r\n        addTodo: (obj) => dispatch (addTodos(obj)),\r\n        removeTodo: (id) => dispatch (removeTodos(id)),\r\n        updateTodo: (obj) => dispatch (updateTodos(obj)),\r\n        completeTodo: (id) => dispatch (completeTodos(id)),\r\n    };\r\n};\r\n\r\nconst Todos = (props) => {\r\n\r\n     const [todo, setTodo] = useState(\"\");\r\n\r\n     \r\n\r\n     const handleChange = (e) =>{\r\n         setTodo (e.target.value);\r\n     };\r\n     useState(\"todo text\");\r\n     console.log(\"props from \", props);\r\n\r\n    return (\r\n        <div className=\"addTodos\">\r\n          <input \r\n             type=\"text\"\r\n             onChange={(e)=>handleChange(e)} \r\n             className=\"todo-input\"\r\n             />\r\n\r\n          <button \r\n             className=\"add-btn\" \r\n             onClick={()=>\r\n               props.addTodo({\r\n                   id: Math.floor(Math.random() * 1000),\r\n                   item: todo,\r\n                   completed: false,\r\n               }) \r\n              }\r\n              >\r\n                  Add\r\n          </button>\r\n         \r\n          \r\n        </div>\r\n    );\r\n};\r\n\r\nexport default connect(mapStateToProps,mapDispatchToProps)(Todos) ;\r\n","import './App.css';\nimport DisplayTodos from './components/DisplayTodos';\nimport Todos from './components/Todos';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n        <h1>ToDo App</h1>\n      <Todos/>\n      <DisplayTodos/>\n    </div>\n  );\n}\n\nexport default App;\n","import { configureStore } from \"@reduxjs/toolkit\";\r\nimport { reducer } from \"./reducer\";\r\n\r\nconst store = configureStore({\r\n    reducer: reducer,\r\n});\r\n\r\nexport default store;\r\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport {Provider} from \"react-redux\";\nimport store from \"./redux/store\";\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    \n    <Provider store={store}>\n      <App/>\n    </Provider>\n\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}